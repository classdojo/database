// Generated by CoffeeScript 1.6.2
/*
Model builder
*/


(function() {
  var Db, ModelBuilder, ModelDirector, ModelGraph, ModelNodeBuilder, MongooseB, MongooseBuilder, NodeManager,
    __slice = [].slice;

  ModelBuilder = require("model-builder");

  MongooseBuilder = require("mongoose-builder");

  ModelGraph = ModelBuilder.Graph;

  ModelDirector = ModelBuilder.Director;

  ModelNodeBuilder = ModelBuilder.NodeBuilder;

  NodeManager = ModelBuilder.NodeManager;

  MongooseB = MongooseBuilder.Builder;

  Db = (function() {
    /*
      Method: constructor
    
      Initialize Db with a reference to where relation, schema, and 
      dbSettings files are.
    */
    function Db(__schema, __dbSettings) {
      this.__schema = __schema;
      this.__dbSettings = __dbSettings;
      this.__files = {};
    }

    /*
      Method: loadConfigs
    
      Loads
        -relational
        -schema
        -dbSettings
      configs.  The result should be a JSON object.
    */


    Db.prototype.init = function() {
      this.__nodeBuilder = new ModelNodeBuilder(this.__schema);
      this.__nodeBuilder.init();
      this.__nodeManager = new NodeManager(this.__nodeBuilder.nodes);
      this.__dbBuilder = new MongooseB(this.__nodeBuilder, this.__nodeManager, this.settings);
      return this;
    };

    Db.prototype.connect = function(callback) {
      var director,
        _this = this;

      director = new ModelDirector(this.__dbBuilder);
      return director.build(function(err) {
        var graph;

        console.log("Database Initialized...");
        graph = new ModelGraph();
        director.setGraph(graph);
        /*
          TODO(chris): Make it more intuitive that
          the director should set the nodeManager or
          vice-versa
        */

        graph.setNodeManager(_this.__nodeManager);
        return callback(null, graph);
      });
    };

    /*
      Method: RegisterPlugin
    
      Defer to the the driver implementation of registerPlugin. In
      this case m
    */


    Db.prototype.registerPlugin = function() {
      var args;

      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.__dbBuilder.registerPlugin.apply(this.__dbBuilder, args);
    };

    /*
      File Getters
    
      relational - defines the relationships between our mongo models
    
      schema - defines the schema of each model
    
      settings - database connection settings.
    */


    Db.prototype.__defineGetter__('settings', function() {
      var _this = this;

      return this.__files.settings || (this.__files.settings = (function() {
        return _this.__dbSettings.init(process.env.NODE_ENV);
      })());
    });

    return Db;

  })();

  module.exports = Db;

}).call(this);
